---
name: CI Workflow
on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  
env:
  PACKAGE_PATH: "./publish"
  RESOURCE_GROUP_NAME: 
    "rg-${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT }}-${{ vars.LOCATION }}"

jobs:

  ci:
    name: CI Job
    runs-on: ubuntu-latest
    outputs:
      BICEP_CHANGED: ${{ steps.bicep-changes.outputs.src }}
      RESOURCE_GROUP_NAME: ${{ env.RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout Code from Git Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Codebase
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Bicep Changes
        id: bicep-changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - './bicep/**'

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x"

      - name: Restore
        run: dotnet restore ./GitHubActionsDemo.sln

      - name: Build
        run: dotnet build ./GitHubActionsDemo.sln -c Release --no-restore

      - name: Test
        run: dotnet test --no-build -c Release --logger trx --results-directory "TestResults" 
              /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov

      - name: Publish coverage report to coveralls.io
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./tests/GitHubActionsDemo.WebApi.Tests/TestResults/coverage.info

      - name: Publish Test Results Artifact to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: TestResults
        if: always()

      - name: Install Versionize
        run: dotnet tool install --global Versionize

      - name: Setup Git for Tagging
        run: |
          git config --local user.email "vc4u2c@gmail.com"
          git config --local user.name "System"

      - name: Versionize Release
        id: versionize
        run: versionize --changelog-all --exit-insignificant-commits
        continue-on-error: true

      - name: No Release Required
        if: steps.versionize.outcome != 'success'
        run: echo "Skipping Release. No release required."

      - name: Push changes to GitHub
        if: steps.versionize.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: "Create release"
        if: steps.versionize.outcome == 'success'
        uses: "actions/github-script@v5"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const tags_url = context.payload.repository.tags_url + "?per_page=1"
              const result = await github.request(tags_url)
              const current_tag = result.data[0].name
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: current_tag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: current_tag,
              });
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Publish
        run: dotnet publish ./src/GitHubActionsDemo.WebApi/GitHubActionsDemo.WebApi.csproj -c Release 
              --no-build --output '${{ env.PACKAGE_PATH }}'

      - name: Upload Artifact to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: ${{ vars.APPLICATION_NAME }}-release
          path: ${{ env.PACKAGE_PATH }}
        
  iac:
    name: Call IaC Workflow Job
    needs: ci
    uses: vc4u2c/GitHubActionsDemo/.github/workflows/iac-workflow.yml@main
    with: 
      RESOURCE_GROUP_NAME: ${{ needs.ci.outputs.RESOURCE_GROUP_NAME }}
    secrets: inherit
    if: ${{ needs.ci.outputs.BICEP_CHANGED == 'true' }}